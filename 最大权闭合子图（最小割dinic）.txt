#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <cstdio>
#include <set>
#include <string.h>
#include <vector>
#include <queue>
using namespace std;
typedef long long LL;
#define _BUG

const int INF=0x3f3f3f3f;
const int N = 105;
const int M = 410;
int max(int a,int b){return a>b?a:b;}

int n,m;
struct plant
{
    int c,t;
}s[N];
int t[N];
vector <int> ed[N];
int a,b;
int S=0,T=1;
int cnt=0;

struct edge
{
  int to,cap,rev;
};
vector <edge> G[N];
int level [N],iter[N];
int vis[N];

inline void add(int from,int to,int cap)
{
  G[from].push_back((edge){to,cap,G[to].size()});
  G[to].push_back((edge){from,0,G[from].size()-1});
}

inline void bfs (int s)
{
  memset(level,-1,sizeof(level));
  queue <int> que;
  level[s]=0;
  que.push(s);
  while (!que.empty())
  {
    int v=que.front();
    que.pop();
    for (int i=0;i<G[v].size();i++)
    {
      edge &e= G[v][i];
      if (e.cap>0&&level[e.to]<0)
      {
        level[e.to]=level[v]+1;
        que.push(e.to);
      }
    }
  }
}
inline int dfs(int v,int t,int f)
{
  if (v==t)
    return f;
  for (int &i=iter[v];i<G[v].size();i++)
  {
    edge &e=G[v][i];
    if (e.cap>0&&level[v]<level[e.to])
    {
      int d=dfs(e.to,t,min(f,e.cap));
      if (d>0)
      {
        e.cap-=d;
        G[e.to][e.rev].cap+=d;
        return d;
      }
    }
  }
  return 0;
}
inline int max_flow(int s,int t)
{
  int flow=0;
  for (;;)
  {
    bfs(s);
    if (level[t]<0)
      return flow;
    memset(iter,0,sizeof(iter));
    int f;
    while ((f=dfs(s,t,INF))>0)
      flow+=f;
  }
}

inline void ini()
{
    memset(s,0,sizeof(s));
    memset(t,0,sizeof(t));
    cnt=0;
    S=0,T=n+m+1;
    for (int i=0;i<=n+m+2;i++)
        G[i].clear();
}

int main()
{
    int T,k,cas=1;
    scanf("%d",&T);
    while (T--)
    {
        scanf("%d%d",&n,&m);
        ini();
        int p1=0,p2=0,ans=0;
        for (int i=1;i<=n;i++)
        {
            scanf("%d",&a);
            add(m+i,T,a);
            ans+=a;
        }
        for (int i=1;i<=m;i++)
        {
            scanf("%d",&a);
            add(S,i,a);
        }
        for (int i=1;i<=n;i++)
        {
            scanf("%d",&k);
            for (int j=0;j<k;j++)
            {
                scanf("%d",&a);
                add(a+1,m+i,INF);
            }
        }
        for (int i=1;i<=m;i++)
            for (int j=1;j<=m;j++)
            {
                scanf("%d",&a);
                if (a==1)
                    add(i,j,INF);
            }
        int res=max_flow(S,T);
        printf("Case #%d: %d\n",cas++,ans-res);
    }
    return 0;
}