#include <cstdio>
#include <algorithm>
using namespace std;
#define MAXN 100005

int a[MAXN],b[MAXN],n,tot,root[MAXN],q,l,r,k,link[MAXN],t;

struct Node
{
      int ls,rs,size;
};
Node tree[MAXN*20];

struct cmp
{
      bool operator () (int i,int j)
      {
            return (a[i]<a[j]);
      }
};
cmp x;

void discretize()
{
      sort(link+1,link+n+1,x); // 以link作为中转站，对a进行排序 
      for (int i=1;i<=n;i++) 
	  	b[link[i]]=i;
}

void insert(int &now,int l,int r,int x)
{
      tree[++tot]=tree[now]; 
	  now=tot;
      tree[now].size++;
      if (l==r) 
	  	return;
      int mid=(l+r)>>1;
      if (x<=mid) 
	  	insert(tree[now].ls,l,mid,x);
      else 
	  	insert(tree[now].rs,mid+1,r,x);
}

int query(int nl,int nr,int l,int r,int k)
{
      if (l==r) 
	  	return l;
      int size=tree[tree[nr].ls].size-tree[tree[nl].ls].size , mid=(l+r)>>1;
      if (size>=k) 
	  	return query(tree[nl].ls,tree[nr].ls,l,mid,k);
      else 
	  	return query(tree[nl].rs,tree[nr].rs,mid+1,r,k-size);
}

int main()
{
      scanf("%d",&t);
      for (int j=1;j<=t;j++)
      {
            root[0]=0; 
			tot=0;
            scanf("%d %d",&n,&q);
            for (int i=1;i<=n;i++) 
			{ 
				scanf("%d",&a[i]); 
				link[i]=i; 
			}
            discretize(); 
            for (int i=1;i<=n;i++) 
            {
                  root[i]=root[i-1];
                  insert(root[i],1,n,b[i]);
            }
            for (int i=1;i<=q;i++) 
            {
                  scanf("%d %d %d",&l,&r,&k);
                  printf("%d\n",a[link[query(root[l-1],root[r],1,n,k)]]);
            }
      }
      return 0;
}