#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <cstdio>
#include <set>
#include <string.h>
#include <vector>
#include <queue>
using namespace std;
typedef long long LL;
const int N = 41000;
const int INF = (1<<20);
const int M = (1<<30)-1 ;
LL n,t,m,sum=0,ct=0;
LL a,b,c,d;
LL ans[N],pos=0;
LL index[N*10];
struct line
{
  LL x,y1,y2;
  LL inout;
}dc[N<<2];
struct ST
{
  LL l,r,cover;
  LL sum,len;
  ST ()
  {
    l=r=cover=0;
    sum=len=0.0;
  }
}tr[N*10];
void getLen(LL k)
{
  if (tr[k].cover>0)
    tr[k].sum=tr[k].len;
  else if (tr[k].r-tr[k].l>1)
    tr[k].sum=tr[k<<1].sum+tr[k<<1|1].sum;
  else
    tr[k].sum=0;
}
void build (LL l,LL r,LL k)
{
  tr[k].l=l;
  tr[k].r=r;
  tr[k].cover=0;
  tr[k].len=index[r]-index[l];
  tr[k].sum=0;
  if (r-l>1)
  {
    LL mid =(l+r)>>1;
    build (l,mid,k<<1);
    build (mid,r,k<<1|1);
  }
}
void insert (LL l,LL r,LL k)
{
  if (tr[k].l==l&&tr[k].r==r)
  {
    tr[k].cover++;
  }
  else
   { 
     LL mid=(tr[k].l+tr[k].r)>>1;
     if (mid>=r)
       insert(l,r,k<<1);
     else if (l>=mid)
       insert(l,r,k<<1|1);
     else
     {
       insert(l,mid,k<<1);
       insert(mid,r,k<<1|1);
     }
    }
    getLen(k);
}
void delet(LL l,LL r,LL k)
{
  if (tr[k].l==l&&tr[k].r==r)
  {
    tr[k].cover--;
  }
  else
  {
    LL mid=(tr[k].l+tr[k].r)>>1;
    if (mid>=r)
      delet(l,r,k<<1);
    else if (l>=mid)
      delet(l,r,k<<1|1);
    else
    {
      delet(l,mid,k<<1);
      delet(mid,r,k<<1|1);
    }
  }
  getLen(k);
}
LL cmp(line a,line b)
{
  return a.x<b.x;
}
LL getID(LL x)
{
  return lower_bound(index,index+ct,x)-index;
}
int main()
{
  LL Case=1;
  while (~scanf("%lld",&n))
  {
    for (LL i=0;i<n;i++)
    {
      scanf("%lld%lld%lld",&a,&c,&d);
      b=0;
      dc[i<<1].x=a;
      dc[i<<1|1].x=c;
      dc[i<<1].y1=dc[i<<1|1].y1=b;
      dc[i<<1].y2=dc[i<<1|1].y2=d;
      dc[i<<1].inout=1;
      dc[i<<1|1].inout=0;
      index[i<<1]=b;
      index[i<<1|1]=d;
    }
    sort(dc,dc+2*n,cmp);
    sort(index,index+2*n);
    ct=0;
    for (LL i=1;i<=2*n;i++)
    {
      if (index[i]!=index[i-1])
        index[ct++]=index[i-1];
    }
    index[ct++]=index[2*n-1];
    build(0,ct-1,1);
    LL ans=0;
    for (LL i=0;i<2*n-1;i++)
    {
      if (dc[i].inout)
      	insert(getID(dc[i].y1),getID(dc[i].y2),1);
      else
      	delet(getID(dc[i].y1),getID(dc[i].y2),1);
      ans+=tr[1].sum*(dc[i+1].x-dc[i].x);
    }
    printf("%lld\n",ans);
  }
    return 0;
}