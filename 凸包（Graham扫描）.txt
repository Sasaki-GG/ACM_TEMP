#include <iostream>
#include <queue>
#include <math.h>
#include <cstdio>
#include <algorithm>
using namespace std; 
long long seed;
int n,top,k;
struct Node
{
	int x;
	int y;
}node[1000005],stack[1000005];
int dist(Node p1,Node p2)
{
	return (p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y);
}
int mult(Node p1,Node p2,Node p0)
{
	return ((p1.x-p0.x)*(p2.y-p0.y)-(p2.x-p0.x)*(p1.y-p0.y));
}
int cmp(Node a,Node b)
{
	if(mult(a,b,node[0])>0)
		return 1;
	else if(mult(a,b,node[0])==0&&dist(a,node[0])<dist(b,node[0]))
		return 1;
	return 0;
}
void Gramham()
{
	int k=0 ;
	for(int i=1;i<n;i++)
	{
		if(node[k].y>node[i].y||((node[k].y==node[i].y)&&node[k].x>node[i].x))
		k=i;
	}
	swap(node[0],node[k]);
	sort(node+1,node+n,cmp);
	top=2;
 	stack[0]=node[0];
 	stack[1]=node[1];
 	stack[2]=node[2];
 	for(int i=3;i<n;i++)
 	{
  		while(top>1&&mult(node[i],stack[top],stack[top-1])>=0)
   			top--;
  		stack[++top]=node[i];
 	}
}
int main()
{
	cin>>n;
	for (int i=0;i<n;i++)
		cin>>node[i].x>>node[i].y;
  	Gramham();
 	int ans=-1;
  	for(int i=0;i<=top;i++)
   		for(int j=i+1;j<=top;j++)
     		ans=max(ans,dist(stack[i],stack[j]));
  	cout<<ans<<endl;
	return 0;
}