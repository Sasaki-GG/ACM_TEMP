#include<iostream>
#include<vector>
#include<string.h>
using namespace std;
#define INF (1<<30)
struct edge
{
	int to,cap,rev;
};
vector <edge> G[205];
int used[205],n,m;
void add(int from,int to,int cap)
{
	G[from].push_back((edge){to,cap,G[to].size()});
	G[to].push_back((edge){from,0,G[from].size()-1});
}
int dfs(int v,int t,int f)
{
	if(v==t)
		return f;
	used[v]=1;
	for(int i=0;i<G[v].size();i++)
	{
		edge &e=G[v][i];
		if (!used[e.to]&&e.cap>0)
		{
			int d=dfs(e.to,t,min(f,e.cap));
			if (d>0)
			{
				e.cap-=d;
				G[e.to][e.rev].cap+=d;
				return d;
			}
		}
	}
	return 0;
}
int max_flow(int s,int t)
{
	int flow=0;
	while (1)
	{
		memset(used,0,sizeof(used));
		int f=dfs(s,t,INF);
		if (f==0)
			return flow;
		flow+=f;
	}
}
int main()
{
	int a,b,c;
	while (cin>>n>>m)
	{
	for(int i=1;i<m;i++)
		G[i].clear();
	for (int i=0;i<n;i++)
	{
		cin>>a>>b>>c;
		add(a,b,c);
	}
	cout<<max_flow(1,m)<<endl;
	}
	return 0;
}