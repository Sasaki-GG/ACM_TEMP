#include <iostream>
#include <vector>
#include <algorithm>
#include <stack>
#include <string>
#include <cstdio>
#include <set>
#include <string.h>
#include <vector>
#include <queue>
using namespace std;
typedef long long LL;
const int N = 305;
const int INF = (1<<20);
int n,t,a,b,c,m,k;
int map[N][N],dp[N][N];
struct edge 
{
	int to,cap,rev;
};
vector <edge> G[N];
int level [N],iter[N];
int used[N];

void add(int from,int to,int cap)
{
	G[from].push_back((edge){to,cap,G[to].size()});
	G[to].push_back((edge){from,0,G[from].size()-1});
}
void bfs (int s)
{
	memset(level,-1,sizeof(level));
	queue <int> que;
	level[s]=0;
	que.push(s);
	while (!que.empty())
	{
		int v=que.front();
		que.pop();
		for (int i=0;i<G[v].size();i++)
		{
			edge &e= G[v][i];
			if (e.cap>0&&level[e.to]<0)
			{
				level[e.to]=level[v]+1;
				que.push(e.to);
			}
		}
	}
}
int dfs(int v,int t,int f)
{
	if (v==t)
		return f;
	for (int &i=iter[v];i<G[v].size();i++)
	{
		edge &e=G[v][i];
		if (e.cap>0&&level[v]<level[e.to])
		{
			int d=dfs(e.to,t,min(f,e.cap));
			if (d>0)
			{
				e.cap-=d;
				G[e.to][e.rev].cap+=d;
				return d;
			}
		}
	}
	return 0;
}
int max_flow(int s,int t)
{
	int flow=0;
	for (;;)
	{
		bfs(s);
		if (level[t]<0)
			return flow;
		memset(iter,0,sizeof(iter));
		int f;
		while ((f=dfs(s,t,INF))>0)
			flow+=f;
	}
}

void ini()
{
	for (int i=0;i<=k+c+2;i++)
		G[i].clear();
}
int main()
{
	scanf("%d%d%d",&k,&c,&m);
	{
		int S=0,T=k+c+2;
		n=k+c;
		for (int i=1;i<=k+c;i++)
			for (int j=1;j<=k+c;j++)
			{
				scanf("%d",&map[i][j]);
				dp[i][j]=map[i][j]==0?INF:map[i][j];
			}
		int mi=(INF),ma=0;
		for (int kk=1;kk<=n;kk++)
			for (int j=1;j<=n;j++)
				for (int i=1;i<=n;i++)
				{
					dp[i][j]=min(dp[i][j],dp[i][kk]+dp[kk][j]);
				}		
		int l=0,r=200*n,mid;
		while (l<r)
		{
			mid=(l+r)>>1;
			ini();
			for (int i=1;i<=k;i++)
			{
				add(S,i,m);
				for (int j=k+1;j<=c+k;j++)
					if (dp[i][j]<=mid)
					{
						add(i,j,1);
					}
			}
			for (int j=k+1;j<=c+k;j++)
				add(j,T,1);
			int ans=max_flow(S,T);
			if (ans==c)
				r=mid;
			else
				l=mid+1;
		}
		printf("%d\n",l);
	}
    return 0;
}